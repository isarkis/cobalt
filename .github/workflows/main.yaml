# Reusable Cobalt CI workflow.

name: main

on:
  workflow_call:
    inputs:
      platform:
        description: 'Cobalt platform.'
        required: true
        type: string

# Global env vars.
env:
  REGISTRY: ghcr.io
  IPV6_AVAILABLE: 0
  LANG: en_US.UTF-8
  IS_BUILDBOT_DOCKER: 1
  #BUILD_ID_SERVER_URL:
  IS_CI: 1
  IS_DOCKER: 1
  NINJA_STATUS: '[%e sec | %f/%t %u remaining | %c/sec | j%r]'
  SCCACHE: 1
  SCCACHE_GCS_BUCKET: cobalt-actions-devel-sccache-linux
  SCCACHE_GCS_OAUTH_URL: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token
  SCCACHE_GCS_RW_MODE: READ_WRITE
  SCCACHE_IDLE_TIMEOUT: 0 # prevent sccache server from shutting down after long idle.
  STARBOARD_TOOLCHAINS_DIR: /root/starboard-toolchains

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Builds, tags, and pushes Cobalt docker images to ghr.
  docker-image:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Login to Docker Registry ${{env.REGISTRY}}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        id: build-docker-image
        uses: ./.github/actions/docker
        with:
          platform: ${{inputs.platform}}
      - name: Set Docker Tag Output
        id: set-docker-tag-output
        run: |
          echo ${{ steps.build-docker-image.outputs.docker_tag }}
          echo "::set-output name=docker_tag::$(echo ${{ steps.build-docker-image.outputs.docker_tag }})"
    outputs:
      docker_tag: ${{steps.set-docker-tag-output.outputs.docker_tag}}
  # Generates build matrix based on json configuration file.
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: set-platforms
        run: echo "::set-output name=platforms::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.platforms')"
      - id: set-includes
        run: echo "::set-output name=includes::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.includes')"
      - id: set-on-device-test
        run: echo "::set-output name=on_device_test::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_device_test')"
      - id: set-on-host-test
        run: echo "::set-output name=on_host_test::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_host_test')"
      - id: set-on-host-test-shards
        run: echo "::set-output name=on_host_test_shards::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.on_host_test_shards')"
      - id: set-on-host-test-bootloader
        run: echo "::set-output name=on_host_test_bootloader::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_host_test_bootloader')"
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
      includes: ${{ steps.set-includes.outputs.includes }}
      on_device_test: ${{ steps.set-on-device-test.outputs.on_device_test }}
      on_host_test: ${{ steps.set-on-host-test.outputs.on_host_test }}
      on_host_test_shards: ${{ steps.set-on-host-test-shards.outputs.on_host_test_shards }}
      on_host_test_bootloader: ${{ steps.set-on-host-test-bootloader.outputs.on_host_test_bootloader }}
  # Runs builds.
  build:
    needs: [docker-image, build-matrix]
    runs-on: [self-hosted, linux, X64]
    name: ${{matrix.platform}}_${{matrix.config}}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-matrix.outputs.platforms) }}
        include: ${{ fromJson(needs.build-matrix.outputs.includes) }}
        config: [devel, debug, qa, gold]
    container: ${{ needs.docker-image.outputs.docker_tag }}
    env:
      # We want temp folder to be on tmpfs which makes workloads faster.
      # However, dind container ends up having / folder mounted on overlay
      # filesystem, whereas /__w which contains Cobalt source code is on tmpfs.
      TMPDIR: /__w/_temp
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GN
        uses: ./.github/actions/gn
      - name: Build Cobalt
        uses: ./.github/actions/build
      - name: Upload Nightly Artifacts
        if: ${{ endsWith(github.workflow, '_nightly') && matrix.config != 'debug' }}
        uses: ./.github/actions/upload_nightly_artifacts
      - name: Upload Test Artifacts
        if: ${{ matrix.config == 'devel' && needs.build-matrix.outputs.on_device_test == 'true' && (endsWith(github.workflow, '_nightly') || github.event.label.name == 'runtest' || github.event_name == 'push') }}
        uses: ./.github/actions/upload_test_artifacts

  # Runs on-device tests.
  on-device-test:
    needs: [docker-image, build-matrix, build]
    if: needs.build-matrix.outputs.on_device_test == 'true' && (endsWith(github.workflow, '_nightly') || github.event.label.name == 'runtest' || github.event_name == 'push') 
    runs-on: [self-hosted, linux, X64]
    name: ${{matrix.platform}}_${{matrix.type}}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-matrix.outputs.platforms) }}
        type: [unit_test, integration_test]
        include: ${{ fromJson(needs.build-matrix.outputs.includes) }}
    container: ${{ needs.docker-image.outputs.docker_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

  # Runs on-host integration and unit tests.
  on-host-test:
    needs: [docker-image, build-matrix]
    if: needs.build-matrix.outputs.on_host_test == 'true'
    runs-on: [self-hosted, linux, X64]
    name: ${{matrix.platform}}_${{matrix.shard}}_test
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-matrix.outputs.platforms) }}
        shard: ${{ fromJson(needs.build-matrix.outputs.on_host_test_shards) }}
        config: [devel]
        include: ${{ fromJson(needs.build-matrix.outputs.includes) }}
    container: ${{ needs.docker-image.outputs.docker_tag }}
    env:
      DISPLAY: :99
      # For some reason tests complaining about HOME set to /github/home
      # with permission denied error.
      HOME: /root
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GN
        uses: ./.github/actions/gn
      - name: Build Cobalt
        uses: ./.github/actions/build
      # Build bootloader if neccessary.
      - name: Set bootloader config
        if: needs.build-matrix.outputs.on_host_test_bootloader != 'null'
        run: echo "COBALT_BOOTLOADER=${{needs.build-matrix.outputs.on_host_test_bootloader}}" >> $GITHUB_ENV
      - name: GN
        if: needs.build-matrix.outputs.on_host_test_bootloader != 'null'
        uses: ./.github/actions/gn
      - name: Build Cobalt
        if: needs.build-matrix.outputs.on_host_test_bootloader != 'null'
        uses: ./.github/actions/build
      # TODO - Move 'Run Tests' to a separate action.
      - name: Set Env Variables
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
      - name: Run Tests
        shell: bash
        run: |
          loader_args=''
          if [ ! -z ${COBALT_BOOTLOADER+x} ]; then
            loader_args="--loader_platform ${COBALT_BOOTLOADER} --loader_config ${{matrix.config}}"
          fi
          if [[ "${{matrix.shard}}" == 'integration' ]]; then
            xvfb-run -a --server-args="-screen 0 1920x1080x24i +render +extension GLX -noreset" python3 $GITHUB_WORKSPACE/cobalt/black_box_tests/black_box_tests.py --platform ${{matrix.target_platform}} --config ${{matrix.config}} ${loader_args}
          elif [[ "${{matrix.shard}}" == 'evergreen' ]]; then
            xvfb-run -a --server-args="-screen 0 1920x1080x24i +render +extension GLX -noreset" python3 $GITHUB_WORKSPACE/cobalt/evergreen_tests/evergreen_tests.py --platform ${{matrix.target_platform}} --config ${{matrix.config}} ${loader_args} --platform_under_test linux --no-can_mount_tmpfs
          else
            xvfb-run -a --server-args="-screen 0 1920x1080x24i +render +extension GLX -noreset" python3 $GITHUB_WORKSPACE/starboard/tools/testing/test_runner.py --platform ${{matrix.target_platform}} --config ${{matrix.config}} -s ${{matrix.shard}} -r ${loader_args}
          fi
