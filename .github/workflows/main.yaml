# Reusable Cobalt CI workflow.

name: CI

on:
  workflow_call:
    inputs:
      docker_service:
        description: 'Docker service to build image from.'
        required: true
        type: string
      platforms:
        description: 'Cobalt platforms (json).'
        required: true
        type: string
      configs:
        description: 'Cobalt configs (json).'
        required: true
        type: string
          #  includes:
          #description: 'Matrix includes (json).'
          #required: true
          #type: string

# Global env vars.
env:
  REGISTRY: ghcr.io
  IPV6_AVAILABLE: 0
  IS_BUILDBOT_DOCKER: 1
  #BUILD_ID_SERVER_URL:
  IS_CI: 1
  IS_DOCKER: 1
  NINJA_STATUS: '[%e sec | %f/%t %u remaining | %c/sec | j%r]'
  SCCACHE: 1
  SCCACHE_GCS_BUCKET: cobalt-actions-devel-sccache-linux
  SCCACHE_GCS_OAUTH_URL: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token
  SCCACHE_GCS_RW_MODE: READ_WRITE

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker-image-build:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout files
        uses: actions/checkout@v2
        with:
          fetch-depth: 2 
      
      - name: Get docker file changes
        id: changed-files
        uses: tj-actions/changed-files@v13.1
        with:
          files: |
            docker-compose.yml
            docker/**

      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ (steps.changed-files.outputs.any_changed == 'true') && (github.event_name != 'pull_request') }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Retrieve Docker metadata
        if: steps.changed-files.outputs.any_changed == 'true'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/cobalt-${{ inputs.docker_service }} 

      - name: Build containers with docker-compose
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: smartlyio/docker-compose-action@v1
        with:
          serviceName: ${{ inputs.docker_service }}
          build: false
          push: "on:push"
          composeArguments: "--no-start"

      - name: Tag images
        if: steps.changed-files.outputs.any_changed == 'true'
        run: docker tag cobalt-${{ inputs.docker_service }} ${{ steps.meta.outputs.tags }}

      - name: Push images
        if: ${{ (steps.changed-files.outputs.any_changed == 'true') && (github.event_name != 'pull_request') }}
        run: docker push ${{ steps.meta.outputs.tags }}

  # Cobalt jobs.
  cobalt-build:
    needs: docker-image-build
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, X64]
    name: ${{matrix.platform}}_${{matrix.config}}
    # Create config matrix
    strategy:
      fail-fast: false
      matrix:
        #platform: ${{ fromJson(inputs.platforms) }} 
        platform: [evergreen-x86, evergreen-x86-sbversion_14]
        config: [devel, debug, qa, gold]
            #config: ${{ fromJson(inputs.configs) }}
        #include: ${{ fromJson(inputs.includes) }}
        include: ${{ fromJson('[{"platform":"evergreen-x86","target_platform":"evergreen-x86"},{"platform":"evergreen-x86-sbversion-14","target_platform":"evergreenx-86"}]') }}
        #include:
        #  - platform: evergreen-x86
        #    target_platform: evergreen-x86
        #    target_cpu: target_cpu=\"x86\"
        #    use_asan: use_asan=false
        #  - platform: evergreen-x86-sbversion-14
        #    target_platform: evergreen-x86
        #    target_cpu: target_cpu=\"x86\"
        #    use_asan: use_asan=false
        #    sb_api_version: sb_api_version=14
    container: ghcr.io/${{ github.repository_owner }}/cobalt-${{ inputs.docker_service }}:main
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set env vars
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "STARBOARD_TOOLCHAINS_DIR=/root/starboard-toolchains" >> $GITHUB_ENV
      - name: Set Android env vars
        if: startsWith(${{matrix.target_platform}}, 'android')
        run: |
          echo "ANDROID_HOME=/root/starboard-toolchains/AndroidSdk/" >> $GITHUB_ENV
          echo "GCS_NIGHTLY_PATH=gs://cobalt-actions-devel-build-artifacts" >> $GITHUB_ENV
      - name: Print env vars
        run: env | sort
      - name: "gn gen"
        run: |
          gn gen $GITHUB_WORKSPACE/out/${{matrix.target_platform}}_${{matrix.config}} --args="target_platform=\"${{matrix.target_platform}}\" ${{matrix.use_asan}} ${{matrix.is_clang}} ${{matrix.using_old_compiler}} ${{matrix.sb_api_version}} ${{matrix.target_os}} ${{matrix.target_cpu}} is_internal_build=false build_type=\"${{matrix.config}}\""
      - name: "gn check"
        run: |  
          gn check $GITHUB_WORKSPACE/out/${{ matrix.target_platform }}_${{ matrix.config }}
      - name: Build ${{matrix.platform}}-${{matrix.config}}
        shell: bash
        run: |
          set -x
          ln -s /root/starboard-toolchains /github/home/starboard-toolchains
          target=all
          if [[ "${{ matrix.config }}" =~ ^(qa|gold)$ ]]; then
            target=default
          fi
          ninja -v -C ${GITHUB_WORKSPACE}/out/${{ matrix.target_platform }}_${{ matrix.config }} ${target}
  
  #win-win32:
  #  needs: docker-image-build
    # The type of runner that the job will run on
    #  runs-on: [self-hosted, X64, windows]
    #name: ${{matrix.platform}}-${{matrix.config}}
    # Create config matrix
    #strategy:
    #  fail-fast: false
    #  matrix:
    #    platform: [win-win32]
    #    config: [devel, debug]
    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
      # Checkout cobalt repo.
      # - uses: actions/checkout@v2
      # Run build
      # - name: echo
      #  run: |
      #    powershell echo ${{matrix.platform}}-${{matrix.config}}
