# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Global env vars.
env:
  REGISTRY: ghcr.io
  IPV6_AVAILABLE: 0
  IS_BUILDBOT_DOCKER: 1
  #BUILD_ID_SERVER_URL:
  IS_CI: 1
  IS_DOCKER: 1
  NINJA_STATUS: '[%e sec | %f/%t %u remaining | %c/sec | j%r]'
  SCCACHE: 1
  SCCACHE_GCS_BUCKET: cobalt-actions-devel-sccache-linux
  SCCACHE_GCS_OAUTH_URL: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token
  SCCACHE_GCS_RW_MODE: READ_WRITE

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  docker-image-build:
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service:
          - build-android
          - build-evergreen
          - build-linux-evergreen
          - build-linux
          - build-linux-stub
          - build-raspi

    runs-on: ubuntu-latest
    steps:
      - name: Checkout files
        uses: actions/checkout@v2
        with:
          fetch-depth: 2 
      
      - name: Get docker file changes
        id: changed-files
        uses: tj-actions/changed-files@v13.1
        with:
          files: |
            docker-compose.yml
            docker/**

      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ (steps.changed-files.outputs.any_changed == 'true') && (github.event_name != 'pull_request') }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Retrieve Docker metadata
        if: steps.changed-files.outputs.any_changed == 'true'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/cobalt-${{ matrix.service }} 

      - name: Build containers with docker-compose
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: smartlyio/docker-compose-action@v1
        with:
          serviceName: ${{ matrix.service }}
          build: false
          push: "on:push"
          composeArguments: "--no-start"

      - name: Tag images
        if: steps.changed-files.outputs.any_changed == 'true'
        run: docker tag cobalt-${{ matrix.service }} ${{ steps.meta.outputs.tags }}

      - name: Push images
        if: ${{ (steps.changed-files.outputs.any_changed == 'true') && (github.event_name != 'pull_request') }}
        run: docker push ${{ steps.meta.outputs.tags }}

  # Cobalt jobs.
  cobalt-build:
    needs: docker-image-build
    # The type of runner that the job will run on
    runs-on: [self-hosted, linux, X64]
    name: ${{matrix.platform}}-${{matrix.config}}
    env:
      PLATFORM: evergreen-x64
      CONFIG: ${{ matrix.config }}
    # Create config matrix
    strategy:
      fail-fast: false
      matrix:
        platform: [android-arm,
                   android-arm64,
                   android-x86,
                   evergreen-arm-hardfp,
                   evergreen-arm-hardfp-sbversion-14,
                   evergreen-arm-hardfp-sbversion-13,
                   evergreen-arm-hardfp-sbversion-12,
                   evergreen-arm-softfp,
                   evergreen-arm-softfp-sbversion-14,
                   evergreen-arm-softfp-sbversion-13,
                   evergreen-arm-softfp-sbversion-12,
                   evergreen-arm64,
                   evergreen-arm64-sbversion-14,
                   evergreen-arm64-sbversion-13,
                   evergreen-arm64-sbversion-12,
                   evergreen-x64,
                   evergreen-x64-sbversion-14,
                   evergreen-x64-sbversion-13,
                   evergreen-x64-sbversion-12,
                   evergreen-x86,
                   evergreen-x86-sbversion-14,
                   evergreen-x86-sbversion-13,
                   evergreen-x86-sbversion-12,
                   linux-x64x11,
                   linux-x64x11-egl,
                   linux-x64x11-internal,
                   linux-x64x11-sbversion-11,
                   linux-x64x11-sbversion-12,
                   linux-x64x11-sbversion-13,
                   linux-x64x11-skia, 
                   raspi-2,
                   raspi-2-skia,
                   raspi-2-sbversion-12,
                   raspi-2-sbversion-13,
                   raspi-2-sbversion-14]
        config: [devel, debug, gold, qa]
        include:
          # android
          - platform: android-arm
            target_platform: android-arm
            target_cpu: target_cpu=\"arm\"
            target_os: target_os=\"android\"
            container: cobalt-build-android
          - platform: android-arm64
            target_platform: android-arm64
            target_cpu: target_cpu=\"arm64\"
            target_os: target_os=\"android\"
            container: cobalt-build-android
          - platform: android-x86
            target_platform: android-x86
            target_cpu: target_cpu=\"x86\"
            target_os: target_os=\"android\"
            container: cobalt-build-android
          # evergreen-arm-hardfp
          - platform: evergreen-arm-hardfp
            target_platform: evergreen-arm-hardfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            container: cobalt-build-raspi
          - platform: evergreen-arm-hardfp-sbversion-14
            target_platform: evergreen-arm-hardfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=14
            container: cobalt-build-raspi
          - platform: evergreen-arm-hardfp-sbversion-13
            target_platform: evergreen-arm-hardfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=13
            container: cobalt-build-raspi
          - platform: evergreen-arm-hardfp-sbversion-12
            target_platform: evergreen-arm-hardfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=12
            container: cobalt-build-raspi
          # evergreen-arm-softfp
          - platform: evergreen-arm-softfp
            target_platform: evergreen-arm-softfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            container: cobalt-build-evergreen
          - platform: evergreen-arm-softfp-sbversion-14
            target_platform: evergreen-arm-softfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=14
            container: cobalt-build-evergreen
          - platform: evergreen-arm-softfp-sbversion-13
            target_platform: evergreen-arm-softfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=13
            container: cobalt-build-evergreen
          - platform: evergreen-arm-softfp-sbversion-12
            target_platform: evergreen-arm-softfp
            target_cpu: target_cpu=\"arm\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=12
            container: cobalt-build-evergreen
          # evergreen-arm64
          - platform: evergreen-arm64
            target_platform: evergreen-arm64
            target_cpu: target_cpu=\"arm64\"
            use_asan: use_asan=false
            container: cobalt-build-evergreen
          - platform: evergreen-arm64-sbversion-14
            target_platform: evergreen-arm64
            target_cpu: target_cpu=\"arm64\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=14
            container: cobalt-build-evergreen
          - platform: evergreen-arm64-sbversion-13
            target_platform: evergreen-arm64
            target_cpu: target_cpu=\"arm64\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=13
            container: cobalt-build-evergreen
          - platform: evergreen-arm64-sbversion-12
            target_platform: evergreen-arm64
            target_cpu: target_cpu=\"arm64\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=12
            container: cobalt-build-evergreen
          # evergeen-x64 
          - platform: evergreen-x64
            target_platform: evergreen-x64
            target_cpu: target_cpu=\"x64\"
            use_asan: use_asan=false
            container: cobalt-build-linux-evergreen
          - platform: evergreen-x64-sbversion-14
            target_platform: evergreen-x64
            target_cpu: target_cpu=\"x64\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=14
            container: cobalt-build-linux-evergreen
          - platform: evergreen-x64-sbversion-13
            target_platform: evergreen-x64
            target_cpu: target_cpu=\"x64\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=13
            container: cobalt-build-linux-evergreen
          - platform: evergreen-x64-sbversion-12
            target_platform: evergreen-x64
            target_cpu: target_cpu=\"x64\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=12
            container: cobalt-build-linux-evergreen
          # evergeen-x86
          - platform: evergreen-x86
            target_platform: evergreen-x86
            target_cpu: target_cpu=\"x86\"
            use_asan: use_asan=false
            container: cobalt-build-evergreen
          - platform: evergreen-x86-sbversion-14
            target_platform: evergreen-x86
            target_cpu: target_cpu=\"x86\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=14
            container: cobalt-build-evergreen
          - platform: evergreen-x86-sbversion-13
            target_platform: evergreen-x86
            target_cpu: target_cpu=\"x86\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=13
            container: cobalt-build-evergreen
          - platform: evergreen-x86-sbversion-12
            target_platform: evergreen-x86
            target_cpu: target_cpu=\"x86\"
            use_asan: use_asan=false
            sb_api_version: sb_api_version=12
            container: cobalt-build-evergreen
          # linux
          - platform: linux-x64x11
            target_platform: linux-x64x11
            container: cobalt-build-linux
          - platform: linux-x64x11-egl
            target_platform: linux-x64x11-egl
            container: cobalt-build-linux
          - platform: linux-x64x11-internal
            target_platform: linux-x64x11-internal
            container: cobalt-build-linux
          - platform: linux-x64x11-skia
            target_platform: linux-x64x11-skia
            container: cobalt-build-linux
          - platform: linux-x64x11-sbversion-11
            target_platform: linux-x64x11
            sb_api_version: sb_api_version=11
            container: cobalt-build-linux
          - platform: linux-x64x11-sbversion-12
            target_platform: linux-x64x11
            sb_api_version: sb_api_version=12
            container: cobalt-build-linux
          - platform: linux-x64x11-sbversion-13
            target_platform: linux-x64x11
            sb_api_version: sb_api_version=13
            container: cobalt-build-linux
          # raspi
          - platform: raspi-2
            target_platform: raspi-2
            target_cpu: target_cpu=\"arm\"
            is_clang: is_clang=false
            container: cobalt-build-raspi
          - platform: raspi-2-skia
            target_platform: raspi-2-skia
            target_cpu: target_cpu=\"arm\"
            is_clang: is_clang=false
            container: cobalt-build-raspi
          - platform: raspi-2-sbversion-12
            target_platform: raspi-2
            target_cpu: target_cpu=\"arm\"
            is_clang: is_clang=false
            sb_api_version: sb_api_version=12
            container: cobalt-build-raspi
          - platform: raspi-2-sbversion-13
            target_platform: raspi-2
            target_cpu: target_cpu=\"arm\"
            is_clang: is_clang=false
            sb_api_version: sb_api_version=13
            container: cobalt-build-raspi
          - platform: raspi-2-sbversion-14
            target_platform: raspi-2
            target_cpu: target_cpu=\"arm\"
            is_clang: is_clang=false
            sb_api_version: sb_api_version=14
            container: cobalt-build-raspi
    container: ghcr.io/isarkis/${{matrix.container}}:main
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout
        uses: actions/checkout@v2
      # Configure environment.
      - name: Set env vars
        run: |
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "STARBOARD_TOOLCHAINS_DIR=/root/starboard-toolchains" >> $GITHUB_ENV
      - name: Set Android env vars
        if: startsWith(${{matrix.target_platform}}, 'android')
        run: |
          echo "ANDROID_HOME=/root/starboard-toolchains/AndroidSdk/" >> $GITHUB_ENV
          echo "GCS_NIGHTLY_PATH=gs://cobalt-actions-devel-build-artifacts" >> $GITHUB_ENV
      - name: Print env vars
        run: env | sort
      # Configure GN.
      - name: "gn gen"
        run: |
          gn gen $GITHUB_WORKSPACE/out/${{matrix.target_platform}}_${{matrix.config}} --args="target_platform=\"${{matrix.target_platform}}\" ${{matrix.use_asan}} ${{matrix.is_clang}} ${{matrix.sb_api_version}} ${{matrix.target_os}} ${{matrix.target_cpu}} is_internal_build=false build_type=\"${{matrix.config}}\""
      - name: "gn check"
        run: |  
          gn check $GITHUB_WORKSPACE/out/${{ matrix.target_platform }}_${{ matrix.config }}
      # Build Cobalt.
      - name: Build ${{matrix.platform}}-${{matrix.config}}
        run: |
          ln -s /root/starboard-toolchains /github/home/starboard-toolchains
          ninja -v -C $GITHUB_WORKSPACE/out/${{ matrix.target_platform }}_${{ matrix.config }} all

  # Win-Win32 Jobs.
  #win-win32:
  #  needs: docker-image-build
    # The type of runner that the job will run on
    #  runs-on: [self-hosted, X64, windows]
    #name: ${{matrix.platform}}-${{matrix.config}}
    # Create config matrix
    #strategy:
    #  fail-fast: false
    #  matrix:
    #    platform: [win-win32]
    #    config: [devel, debug]
    # Steps represent a sequence of tasks that will be executed as part of the job
    #steps:
      # Checkout cobalt repo.
      # - uses: actions/checkout@v2
      # Run build
      # - name: echo
      #  run: |
      #    powershell echo ${{matrix.platform}}-${{matrix.config}}
