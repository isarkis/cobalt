# Reusable Cobalt CI workflow.

name: main

on:
  workflow_call:
    inputs:
      platform:
        description: 'Cobalt platform.'
        required: true
        type: string

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Global env vars.
env:
  REGISTRY: ghcr.io
  IPV6_AVAILABLE: 0
  LANG: en_US.UTF-8
  IS_BUILDBOT_DOCKER: 1
  #BUILD_ID_SERVER_URL:
  IS_CI: 1
  IS_DOCKER: 1
  NINJA_STATUS: '[%e sec | %f/%t %u remaining | %c/sec | j%r]'
  SCCACHE: 1
  SCCACHE_GCS_BUCKET: cobalt-actions-devel-sccache-windows
  SCCACHE_GCS_OAUTH_URL: http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token
  SCCACHE_GCS_RW_MODE: READ_WRITE
  SCCACHE_IDLE_TIMEOUT: 0 # prevent sccache server from shutting down after long idle.
  STARBOARD_TOOLCHAINS_DIR: /root/starboard-toolchains

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Generates build matrix based on json configuration file.
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - id: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - id: set-platforms
        run: echo "::set-output name=platforms::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.platforms')"
      - id: set-includes
        run: echo "::set-output name=includes::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -c '.includes')"
      - id: set-on-device-test
        run: echo "::set-output name=on_device_test::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_device_test')"
      - id: set-on-host-test
        run: echo "::set-output name=on_host_test::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.on_host_test')"
      - id: set-docker-service
        run: echo "::set-output name=docker_service::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.docker_service')"
      - id: set-docker-runner-service
        run: echo "::set-output name=docker_runner_service::$(cat ${GITHUB_WORKSPACE}/.github/config/${{ inputs.platform }}.json | jq -rc '.docker_runner_service')"
    outputs:
      platforms: ${{ steps.set-platforms.outputs.platforms }}
      includes: ${{ steps.set-includes.outputs.includes }}
      on_device_test: ${{ steps.set-on-device-test.outputs.on_device_test }}
      on_host_test: ${{ steps.set-on-host-test.outputs.on_host_test }}
      docker_service: ${{ steps.set-docker-service.outputs.docker_service }}
      docker_runner_service: ${{ steps.set-docker-runner-service.outputs.docker_runner_service }}
  # Build windows docker images.
  docker-image:
    needs: [build-matrix]
    permissions:
      packages: write
    runs-on: windows-2019
    steps:
      - name: Checkout files
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Login to Docker Registry ${{env.REGISTRY}}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        id: build-docker-image
        uses: ./.github/actions/docker_win
        with:
          service: ${{ needs.build-matrix.outputs.docker_service }}
      - name: Build runner docker image
        id: build-runner-docker-image
        uses: ./.github/actions/docker_win
        with:
          service: ${{ needs.build-matrix.outputs.docker_runner_service }}
  gcloud-test-hosted:
    name: gcloud setup hosted
    runs-on: windows-latest
    steps:
      - name: Get PS Version
        run: $PSVersionTable
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.6.0
  gcloud-test-self-hosted:
    name: gcloud setup self hosted
    runs-on: [self-hosted, X64, Windows]
    steps:
      - name: Get PS Version
        run: $PSVersionTable
      - name: Get PS Version Explicit
        shell: pwsh
        run: $PSVersionTable
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.6.0
  # Runs builds.
  build:
    needs: [docker-image, build-matrix]
    runs-on: [self-hosted, X64, Windows]
    name: ${{matrix.platform}}_${{matrix.config}}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-matrix.outputs.platforms) }}
        include: ${{ fromJson(needs.build-matrix.outputs.includes) }}
        config: [devel, debug, qa, gold]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GN
        uses: ./.github/actions/gn
      - name: Build Cobalt
        uses: ./.github/actions/build
      - name: Upload Nightly Artifacts
        if: ${{ endsWith(github.workflow, '_nightly') && matrix.config != 'debug' }}
        uses: ./.github/actions/upload_nightly_artifacts
  # Runs on the host unit and integration tests.
  on-host-test:
    needs: [docker-image, build-matrix]
    if: needs.build-matrix.outputs.on_host_test == 'true'
    runs-on: [self-hosted, Windows, X64]
    name: ${{matrix.platform}}_${{matrix.shard}}_test
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.build-matrix.outputs.platforms) }}
        shard: [0, 1, 2, 3]
        config: [devel]
        include: ${{ fromJson(needs.build-matrix.outputs.includes) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: GN
        uses: ./.github/actions/gn
      - name: Build Cobalt
        uses: ./.github/actions/build
      - name: Run Tests
        shell: bash
        run: python3 ${GITHUB_WORKSPACE}/starboard/tools/testing/test_runner.py --platform ${{matrix.target_platform}} --config ${{matrix.config}} -s ${{matrix.shard}} -r
