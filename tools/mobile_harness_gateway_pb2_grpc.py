# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mobile_harness_gateway_pb2 as mobile__harness__gateway__pb2


class mobile_harness_gatewayStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.exec_command = channel.unary_stream(
                '/mobile_harness_gateway.mobile_harness_gateway/exec_command',
                request_serializer=mobile__harness__gateway__pb2.MobileHarnessCommand.SerializeToString,
                response_deserializer=mobile__harness__gateway__pb2.MobileHarnessResponse.FromString,
                )


class mobile_harness_gatewayServicer(object):
    """Interface exported by the server.
    """

    def exec_command(self, request, context):
        """A dumb proxy RPC service that passes user defined command line options
        to the mobile harness gateway and streams back output in real time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_mobile_harness_gatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'exec_command': grpc.unary_stream_rpc_method_handler(
                    servicer.exec_command,
                    request_deserializer=mobile__harness__gateway__pb2.MobileHarnessCommand.FromString,
                    response_serializer=mobile__harness__gateway__pb2.MobileHarnessResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mobile_harness_gateway.mobile_harness_gateway', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class mobile_harness_gateway(object):
    """Interface exported by the server.
    """

    @staticmethod
    def exec_command(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mobile_harness_gateway.mobile_harness_gateway/exec_command',
            mobile__harness__gateway__pb2.MobileHarnessCommand.SerializeToString,
            mobile__harness__gateway__pb2.MobileHarnessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
